# -*- coding: utf-8 -*-
"""Sales-Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Divija12345/a959298a0d058bf1a588fb0537377215/sales-analysis.ipynb

# **Importing Dependencies**

## Loading to a pandas dataframe
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

sales = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/SalesAnalysis.csv')

sales.head()

sales.shape # To check number of rows and columns

sales.columns

"""# Dataset Information"""

sales.dtypes

"""Well here date is object , let's convert it into Datetime"""

sales['Date'] = pd.to_datetime(sales['Date'])

sales['Date']

sales.dtypes

"""Finally , we have changed date to datetime from object"""

sales.set_index('Date',inplace =True)

sales.head()

sales.describe()  # Statistical Summary

sales.isnull().sum() # To check null values

"""Lets's first handle Unit Price column by using mean value"""

avg_unit_price = sales["Unit price"].astype("float").mean(axis=0)
sales["Unit price"].replace(np.nan, avg_unit_price, inplace=True)

"""For Quantity we will use Mode value"""

from scipy import stats
mode=stats.mode(sales['Quantity'])

print(mode)

sales['Quantity'].replace(np.nan, "mode", inplace=True)

"""For rest remaining values we will simply drop them"""

sales.dropna(inplace=True)

sales.isnull().sum() # Finally we can see No null values

sales.corr()

np.round(sales.corr(),2)

"""# **EXPLORATORY DATA ANALYSIS**"""

plt.figure(dpi=125)
sns.heatmap(np.round(sales.corr(),2),annot=True)
plt.show()

"""**The best correlated are Tax 5%, Total, Gross Income and cogs i.e Cost of Goods sold with a correlation of 1.**

**Also, the above mentioned all has a good correlation of 0.71 with Quantity**



"""

plt.figure(figsize=(12,6),dpi=100)
sns.regplot(x='Quantity',y='cogs',data=sales,color='green')
plt.xlabel('Quantity')
plt.ylabel('Cost of Goods Sale')
plt.title('Quantity v Cost of Goods Sale',fontsize=15)
plt.show()

plt.figure(dpi=125)
sns.countplot(sales['City'])
plt.xlabel('City')
plt.ylabel('Count')
plt.title('Which City is most busy?')
A,B,C =sales.City.value_counts()

print('Yangon -',A)
print('Naypyitow -',C)
print('Mandalay -',B)
plt.show()

plt.figure(figsize=(12,6),dpi=100)
sns.regplot(x='Unit price',y='gross income',data=sales,color='blue')
plt.xlabel('Unit Price')
plt.ylabel('Gross Income')
plt.title('Unit Price v Gross Income',fontsize=15)
plt.show()

# To see the distribution of different ratings
plt.figure(dpi=125) 
sns.distplot(sales['Rating'],kde=False)
plt.show()

"""Let's find the mean rating now"""

# To find Mean Rating
plt.figure(dpi=125)
sns.distplot(sales['Rating'],kde=False)
plt.axvline(x=np.mean(sales['Rating']),c='green',label='Mean Rating')
plt.legend()
plt.show()

# Plotting Histogram for all
sales.hist(figsize=(12,12))
plt.show()

plt.figure(figsize=(12,6),dpi=100)
sns.regplot(x='Tax 5%',y='gross income',data=sales,color='Red')
plt.xlabel('Tax 5%')
plt.ylabel('Gross Income')
plt.show()

"""<h2 style='background:brown; border:0; color:white'><center>Analysis of Branch, City and Product Type</center><h2>"""

# Branch Count
plt.figure(dpi=125)
sns.countplot(sales['Branch'])
plt.xlabel('Branch Name')
plt.ylabel('Count')
plt.title('Which Branch is the most busy?')
A,B,C =sales.Branch.value_counts()
print('Branch A -',A)
print('Branch B -',C)
print('Branch C -',B)
plt.show()

plt.figure(dpi=125)
sns.countplot(sales['Payment'])
plt.xlabel('Payment Method')
plt.ylabel('Count')
plt.title('Which Payment Method is most used?')
A,B,C =sales.Payment.value_counts()

print('E-wallet -',A)
print('Cash -',B)
print('Credit Card -',C)
plt.show()

plt.figure(dpi=125)
sns.countplot(sales['Gender'])
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Count of Gender')
A,B =sales.Gender.value_counts()

print('Male-',B)
print('Female -',A)

plt.show()

"""**Visualizing a Gender based comparison related to Product Type**"""

sns.catplot(x='Product line',y='Unit price',hue='Gender',data=sales,aspect=2)
plt.xlabel('Product Type')
plt.ylabel('Unit Price')
plt.show()

sns.catplot(x='Product line',y='Unit price',hue='Gender',data=sales,aspect=2,jitter=False)
plt.xlabel('Product Type')
plt.ylabel('Unit Price')
plt.show()

plt.figure(dpi=125)
sns.countplot(y ='Product line', hue = "Gender", data = sales) 
plt.xlabel('Count')
plt.ylabel('Product Type')
plt.show()

"""**Well, In Health & Beauty, Males are much more than Females whereas in Fashion accessories , Food & beverages and Sports & Travel Females are more and in the rest there is not much significant difference.**

**Visualizing a City based comparison related to Product Type**
"""

sns.catplot(x='Product line',y='Unit price',hue='City',kind='swarm',data=sales,aspect=2)
plt.xlabel('Product Type')
plt.ylabel('Unit Price')
plt.show()

sns.catplot(x='Product line',y='Unit price',hue='City',data=sales,aspect=2,jitter=False)
plt.xlabel('Product Type')
plt.ylabel('Unit Price')
plt.show()

plt.figure(dpi=125)
sns.countplot(y ='Product line', hue = "City", data = sales) 
plt.xlabel('Count')
plt.ylabel('Product Type')
plt.show()

"""**Well, Yangon leads at Home & Lifestyle and Electronic accessories.**

**Naypyitaw leads at Food & Bevaerages and Fashion accessories.**

**Mandalay leads at Sports & Travel and Health & Beauty.**

**Finding the most used payment method for Product Type, Branch and City**
"""

plt.figure(dpi=125)
sns.countplot(y ='Product line', hue = "Payment", data = sales) 
plt.xlabel('Count')
plt.ylabel('Product Type')
plt.show()

plt.figure(dpi=125)
sns.countplot(y ='Branch', hue = "Payment", data = sales) 
plt.xlabel('Count')
plt.ylabel('Branch')
plt.show()

plt.figure(dpi=125)
sns.countplot(y ='City', hue = "Payment", data = sales) 
plt.xlabel('Count')
plt.ylabel('Product Type')
plt.show()

"""**Finding Which Branch has better sale for a particular product type**"""

plt.figure(dpi=125)
sns.countplot(y ='Product line', hue = "Branch", data = sales) 
plt.xlabel('Count')
plt.ylabel('Product Type')
plt.show()

"""**Boxen Plot for Rating and Quantity**

**What is Boxen Plot?**

**The Boxen plot is very similar to box plot, except for the fact that it plots different quartile values. By plotting different quartile values, we are able to understand the shape of the distribution particularly in the head end and tail end.**
"""

sns.catplot(y ='Rating',x='Quantity', data = sales,kind='boxen',aspect=3) 
plt.xlabel('Quantity')
plt.ylabel('Rating')
plt.show()

